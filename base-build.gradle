/*
 * Copyright (c) 2022. OperaciÃ³n Kami - Kaze.
 *
 * Licensed under the GNU General Public License v3.0
 *
 * https://www.gnu.org/licenses/gpl-3.0.html
 *
 * Permissions of this strong copyleft license are conditioned on making available complete
 * source code of licensed works and modifications, which include larger works using a licensed
 * work, under the same license. Copyright and license notices must be preserved. Contributors
 * provide an express grant of patent rights.
 */

android {
    compileSdkVersion project.compileSdkVersion

    defaultConfig {
        applicationId "es.kamikaze.app"
        minSdkVersion project.minSdkVersion
        targetSdkVersion project.targetSdkVersion
        versionCode 1
        versionName VERSION
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            initWith debug
            minifyEnabled false
        }

        release {
            initWith release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            consumerProguardFiles 'consumer-rules.pro'
        }
    }

    lintOptions {
        warningsAsErrors true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    // variant filter to ignore unneeded dependencies
    variantFilter { variant ->
        if (!variant.buildType.name.contains(rootProject.ext.getBuildType())) {
            setIgnore(true)
        }
    }

    buildFeatures {
        viewBinding = true
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':kz-components')

    // AndroidX
    compileOnly dependencyImport.lombok
    annotationProcessor  dependencyImport.lombok

    implementation dependencyImport.kotlin
    implementation dependencyImport.appCompat
    implementation dependencyImport.material
    implementation dependencyImport.contraintLayout
    implementation dependencyImport.livedata
    implementation dependencyImport.viewmodel
    implementation dependencyImport.navigationFragment
    implementation dependencyImport.navigationUi
    implementation dependencyImport.splashScreen

    // External dependencies
    implementation dependencyImport.lottie

    // Map Services and Firebase
    implementation dependencyImport.mapServices
    implementation dependencyImport.firebaseBom
    implementation dependencyImport.firebaseAnalytics

    // Unit Testing Dependencies
    testImplementation dependencyImport.junit
}